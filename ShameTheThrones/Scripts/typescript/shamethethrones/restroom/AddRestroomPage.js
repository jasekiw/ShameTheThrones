define(["require", "exports", "../google/Map"], function (require, exports, Map_1) {
    "use strict";
    var maps = google.maps;
    var AddRestroomPage = (function () {
        function AddRestroomPage() {
            var _this = this;
            this.setAddressHandlerSet = false;
            this.showPosition = function (latitude, longitude, calledByMarker) {
                if (calledByMarker === void 0) { calledByMarker = false; }
                var location = { lat: latitude, lng: longitude };
                _this.geocoder.geocode({ location: location }, function (results) {
                    if (results[0]) {
                        _this.addAddressToForm(results[0], calledByMarker);
                    }
                    else {
                        console.log("no results found");
                    }
                });
            };
            this.geocoder = new maps.Geocoder();
            this.map = new Map_1.Map(".map_container");
            this.map.showMap();
            this.map.addMarkerForCurrent();
            this.map.getCurrentMarker()
                .addListener("dragend", function () {
                var position = _this.map.getCurrentMarker().getPosition();
                _this.setLocation(position.lat(), position.lng());
            });
            var infowindow = new google.maps.InfoWindow({
                content: "<div class=\"flexible-btn-container\"><a href=\"javascript:void(0);\" id=\"SetAddress\" class=\"btn btn-default\">Set address to this location</a></div>"
            });
            this.map.getCurrentMarker()
                .addListener("click", function () {
                infowindow.open(_this.map.map, _this.map.getCurrentMarker());
                if (!_this.setAddressHandlerSet) {
                    $("#SetAddress")
                        .click(function () {
                        var position = _this.map.getCurrentMarker().getPosition();
                        _this.showPosition(position.lat(), position.lng(), true);
                        _this.setLocation(position.lat(), position.lng());
                    });
                    _this.setAddressHandlerSet = true;
                }
            });
            this.form = $("#NewRestroom");
            $("#fillByLocation").click(function () { return _this.map.getLocation(function () {
                _this.showPosition(_this.map.currentLatitude, _this.map.currentLongitude);
                _this.map.setCurrentMarkerPosition(_this.map.currentLatitude, _this.map.currentLongitude);
                _this.setLocation(_this.map.currentLatitude, _this.map.currentLongitude);
            }); });
            $("#Address").keyup(function () { return _this.calculateAddress(); });
            $("#City").keyup(function () { return _this.calculateAddress(); });
            $("#State").keyup(function () { return _this.calculateAddress(); });
            $("#ZipCode").keyup(function () { return _this.calculateAddress(); });
        }
        /**
         *
         * Searches bathrooms by the address entered and also sets the location
         */
        AddRestroomPage.prototype.calculateAddress = function () {
            var _this = this;
            if ($("#Address").val().length > 3 && $("#City").val().length > 3 && $("#State").val().length >= 2 && $("#ZipCode").val().length > 3) {
                var address = $("#Address").val().trim() + " " + $("#City").val().trim() + ", " + $("#State").val().trim() + " " + $("#ZipCode").val().trim();
                this.map.searchZip(address, function () {
                    _this.setLocation(_this.map.currentLatitude, _this.map.currentLongitude);
                    _this.map.setCurrentMarkerPosition(_this.map.currentLatitude, _this.map.currentLongitude);
                }, true, 20);
            }
        };
        /**
         *
         * Sets the Form's position for submition
         * @param lat
         * @param lng
         */
        AddRestroomPage.prototype.setLocation = function (lat, lng) {
            $("#coordX").val(lat);
            $("#coordY").val(lng);
        };
        AddRestroomPage.prototype.locationDeclined = function () {
            console.log("location declined");
        };
        AddRestroomPage.prototype.addAddressToForm = function (address, calledByMarker) {
            if (calledByMarker === void 0) { calledByMarker = false; }
            var isAddress = false;
            address.types.forEach(function (addressType) {
                if (addressType === "street_address")
                    isAddress = true;
            });
            if (isAddress) {
                $("#Address").val(address.address_components[0].short_name + " " + address.address_components[1].short_name);
                $("#City").val(address.address_components[2].short_name);
                $("#State").val(address.address_components[5].short_name);
                $("#ZipCode").val(address.address_components[7].short_name);
                if (!calledByMarker)
                    this.calculateAddress();
            }
            else
                console.log("not an address");
        };
        AddRestroomPage.prototype.submit = function (e) {
            console.log($("#coordX").val());
            console.log($("#coordY").val());
            e.preventDefault();
        };
        return AddRestroomPage;
    }());
    exports.AddRestroomPage = AddRestroomPage;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
